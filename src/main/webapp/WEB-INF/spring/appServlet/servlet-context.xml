<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:websocket="http://www.springframework.org/schema/websocket"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/websocket http://www.springframework.org/schema/websocket/spring-websocket-4.3.xsd
		http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<!-- 뷰 리졸버를 우선순위 2로 지정 -->
		<beans:property name="order" value="1" />
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<!-- 
		문제점 : 모든 annotation 등록이 servlet-context.xml에 된다는 것
		- 원하는 파일로 자동으로 나눠서 등록되도록 구분할 필요가 있다
		- @Controller : servlet-context.xml에 등록(요청 처리)
		- @Service : root-context.xml, 요청과 무관하게 실행이 가능해야 한다
		- @Repository : root-context.xml
		- @Component : root-context.xml
	 -->
	<context:component-scan base-package="com.kh.batterflow" use-default-filters="false">
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>	
	</context:component-scan>
	
	<!--
	 		웹소켁 관련 설정
	 		1. 서버 등록 : <beans:bean>
	 		2. 웹소켓 서비스 설정
	 			- websocket xmlns 필요
	  -->
	
<!-- 	<beans:bean id="basicServer" class="com.kh.batterflow.webSocket.WebSocketBasicServer"></beans:bean> -->
<!-- 	<websocket:handlers> -->
		<!-- 
			basicServer에 다음 주소를 할당
			ws://localhost:8088/batterflow/basic
		 -->
<!-- 		<websocket:mapping handler="basicServer" path="basic"/> -->
<!-- 	</websocket:handlers> -->
	
	
	<beans:bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<beans:property name="defaultEncoding" value="UTF-8"></beans:property>	
		<beans:property name="maxUploadSize" value="99999999999"></beans:property>
		<beans:property name="maxUploadSizePerFile" value="99999999999"></beans:property>
	</beans:bean>
	
	<!-- 파일 다운로드에서 사용할 빈객체  -->
	<beans:bean class="org.springframework.web.servlet.view.BeanNameViewResolver"> 
	<beans:property name="order" value="0"/> 
	</beans:bean>
	
	<!-- 파일 다운로드 빈객체 클래스 추가 -->
	<beans:bean id="fileDownload" class="com.kh.batterflow.user.document.service.DownloadView"/>


	<!-- <tx:annotation-driven/>
	<beans:bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<beans:property name="dataSource" ref="dataSource2"></beans:property>
	</beans:bean> -->
	<!-- <tx:annotation-driven transaction-manager="transactionManager"/> -->
	
	<!-- 로그인 인터셉터 설정정 -->
	<beans:bean id="loginInterceptor" class="com.kh.batterflow.commons.interceptor.LoginInterceptor" />
	<interceptors>
		<interceptor>
			<mapping path="/member/login"/>
			<beans:ref bean="loginInterceptor" />
		</interceptor>
		<interceptor>
			<mapping path="/myInfo/personinfo" />
			<beans:ref bean="loginInterceptor"/>
		</interceptor>
	</interceptors>

</beans:beans>